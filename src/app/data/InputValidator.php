<?php
/**
 * Copyright (c) 2015 · Kerem Güneş
 * Apache License 2.0 · http://github.com/froq/froq
 */
declare(strict_types=1);

namespace froq\app\data;

use froq\validation\Validation;

/**
 * Validator class, validates data of given DTO instance & fills `$errors` byref
 * on validate process if validation fails.
 *
 * @package froq\app\data
 * @object  froq\app\data\InputValidator
 * @author  Kerem Güneş
 * @since   6.0
 * @internal
 */
class InputValidator
{
    /**
     * Constructor.
     *
     * @param froq\app\data\Data $data
     */
    public function __construct(
        public readonly Data $data
    ) {}

    /**
     * Validate DTO data.
     *
     * Note: To use this method, `validations()` method must be defined in DTO subclass.
     * Otherwise `DataException` will be thrown on call-time.
     *
     * @param  array      &$data      Data to be validated.
     * @param  array|null &$errors    Generated by Validation class on fails.
     * @param  array|null  $options   Validation options, eg. "throwErrors" etc.
     * @param  array       $arguments Call-time arguments for DTO's validations() method, in case.
     * @return bool
     * @throws froq\app\data\DataException
     */
    public function validate(array &$data, array &$errors = null, array $options = null, array $arguments = []): bool
    {
        try {
            $rules = $this->data->validations(...$arguments);
        } catch (\Throwable $e) {
            // Undefined method error & all other errors.
            throw new DataException($e->getMessage(), cause: $e);
        }

        return (new Validation($rules, $options))->validate($data, $errors);
    }
}
